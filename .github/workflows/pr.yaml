name: "Terraform Workflow"

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Debug context
      run: |
        echo "GitHub repository: ${{ github.repository }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub actor: ${{ github.actor }}"
        echo "GitHub event name: ${{ github.event_name }}"

    - name: Authenticate to GCP via WIF
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
        service_account: ${{ vars.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.7.5

    - name: Terraform Init
      run: terraform init

    # - name: Terraform Format Check
    #   id: fmt
    #   run: terraform fmt -check -recursive || true

    # - name: Terraform Validate
    #   id: validate
    #   run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -out=tfplan || true

    - name: Convert Plan to Text
      if: github.event_name == 'pull_request'
      run: terraform show -no-color tfplan > tfplan.txt || echo "no plan file"

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planOutput;
            try {
              planOutput = fs.readFileSync('tfplan.txt', 'utf8');
              // GitHub comments have size limits, so truncate if necessary
              const maxSize = 65000;
              if (planOutput.length > maxSize) {
                planOutput = planOutput.substring(0, maxSize) + '\n\n... Plan output truncated due to size ...'
              }
            } catch (error) {
              planOutput = 'Error reading plan output: ' + error.message;
            }
              
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout || 'No output' }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${planOutput}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var="project_id=${{ vars.GCP_PROJECT_ID }}"
